name: Deploy to EKS

on:
  push:
    branches:
      - master

jobs:
  check_changes:
    name: Check for changes in app directory
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.check_app_changes.outputs.app_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get the whole history for the changes check

      - name: Check if previous deploy failed
        id: check_previous_failed
        run: |
          if [ -f .deploy_failed ]; then
            echo "app_changed=false" >> $GITHUB_OUTPUT
            echo "Previous deploy failed. Skipping further checks."
            exit 0
          fi

      - name: Check for changes in app directory
        id: check_app_changes
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^app/"; then
            echo "app_changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected in app directory"
          else
            echo "app_changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in app directory"
          fi

  deploy:
    name: Build and Deploy
    needs: check_changes
    if: needs.check_changes.outputs.app_changed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get the whole history for the proper git-based versions

      - name: Set variables
        id: vars
        run: |
          echo "tag=${{ github.run_number }}" >> "$GITHUB_OUTPUT"
          echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.32.0

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: "latest"
        id: install

      - name: Authenticate to EKS
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name techops-cluster

      # Set up Docker Buildx for faster builds with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr get-login-password | docker login --username AWS --password-stdin ${{ vars.ECR_REPO }}

      # Build and push with cache
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ vars.ECR_REPO }}:${{ steps.vars.outputs.tag }}
            ${{ vars.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
            ${{ vars.ECR_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Validate helm chart
      - name: Validate Helm Chart
        run: |
          helm lint ./helm-chart
          helm template hello-app ./helm-chart --set image.repository=${{ vars.ECR_REPO }} --set image.tag=${{ steps.vars.outputs.tag }}

      # Deploy with Helm
      - name: Deploy app with Helm
        run: |
          helm upgrade --install hello-app ./helm-chart \
            --set image.repository=${{ vars.ECR_REPO }} \
            --set image.tag=${{ steps.vars.outputs.tag }} \
            --set gitCommit=${{ steps.vars.outputs.sha_short }}

      # Notify on success (for example, to Slack)
      # - name: Notify deployment status
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: deployments
      #     SLACK_TITLE: Deployment Status
      #     SLACK_MESSAGE: |
      #       Deployment of ${{ github.repository }} to EKS
      #       Status: ${{ job.status }}
      #       Image: ${{ vars.ECR_REPO }}:${{ steps.vars.outputs.tag }}
      #       Commit: ${{ steps.vars.outputs.sha_short }}
